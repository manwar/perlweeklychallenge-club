#!/usr/bin/env raku
#BEGIN %*ENV<RAKU_TEST_DIE_ON_FAIL> = 1;
#BEGIN %*ENV<AUTHOR_TESTING> = 1;

use Test;
use task-one;

my @testcases =
  ("aba", "aabb", "abcd", "bac", "aabc") => 2,
  ("aabb", "ab", "ba")                   => 3,
  ("AAbb", "ab", "ba")                   => 1,
  ("\c[PENGUIN, BELL]", "\c[BELL, PENGUIN]", "\c[PENGUIN, PENGUIN]", 
   "ÄäÖöÜü", "ÄäÖÖööÜÜüü", "ÄäÖÖöößÜÜüü", 
   "\c[GRINNING FACE, SMILING FACE WITH HALO]", "\c[GRINNING FACE, SMILING FACE WITH HALO, SMILING FACE WITH HALO]", "\c[GRINNING FACE]",
   "àè", "àèàè", "àèä",
   "\c[EGYPTIAN HIEROGLYPH A001, EGYPTIAN HIEROGLYPH B009]", "\c[EGYPTIAN HIEROGLYPH A001, EGYPTIAN HIEROGLYPH B009, EGYPTIAN HIEROGLYPH B009]", "\c[EGYPTIAN HIEROGLYPH A001, EGYPTIAN HIEROGLYPH B009, EGYPTIAN HIEROGLYPH B008]"
  )                                      => 5
;

plan @testcases.elems;
cmp-ok solution(.key), &[eqv], .value for @testcases;
#is-deeply solution(.key), .value for @testcases;

if ?%*ENV<AUTHOR_TESTING> {
  for @testcases.keys -> $i {
    my ($input, $output) = @testcases[$i].kv;
    say $i + 1 ~ '. testcase';
    isa-ok $input, List, 'domain data structure';
    ok all($input) ~~ Str, 'domain value';
    isa-ok $output, Int, 'co-domain data structure';
    ok all($output) ~~ Int, 'co-domain value';    
  }
}