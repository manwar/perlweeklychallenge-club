#!/usr/bin/env raku
#BEGIN %*ENV<RAKU_TEST_DIE_ON_FAIL> = 1;
#BEGIN %*ENV<AUTHOR_TESTING> = 1;

use Test;
use task-one;

my @testcases =
  ("java", "javascript", "julia") => ("j", "a"),
  ("bella", "label", "roller")    => ("e", "l", "l"),
  ("cool", "lock", "cook")        => ("c", "o"),
  ("Ää\c[LATIN SMALL LETTER J WITH CARON, COMBINING DOT BELOW]ÖöÜü", "èöè\c[LATIN SMALL LETTER J WITH CARON, COMBINING DOT BELOW]èÜè")
                                  => ("\c[LATIN SMALL LETTER J WITH CARON, COMBINING DOT BELOW]", "ö", "Ü")
;

plan @testcases.elems;
is-deeply solution(.key).sort, .value.sort for @testcases;

if ?%*ENV<AUTHOR_TESTING> {
  for @testcases.keys -> $i {
    my ($input, $output) = @testcases[$i].kv;
    say $i + 1 ~ '. testcase';
    isa-ok $input, List, 'domain data structure';
    ok all($input) ~~ Str, 'domain value';
    isa-ok $output, List, 'co-domain data structure';
    ok all($output) ~~ Str, 'co-domain value';    
  }
}