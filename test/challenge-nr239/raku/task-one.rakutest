#!/usr/bin/env raku
#BEGIN %*ENV<RAKU_TEST_DIE_ON_FAIL> = 1;
#BEGIN %*ENV<AUTHOR_TESTING> = 1;

use Test;
use task-one;

my @testcases =
  (("ab", "c"), ("a", "bc")) => True,
  (("ab", "c"), ("ac", "b")) => False,
  (("ab", "cd", "e"), ("abcde")) => True,
;

#Using @arr1, word1 => "ab" . "c" => "abc"
#Using @arr2, word2 => "a" . "bc" => "abc"

#Using @arr1, word1 => "ab" . "c" => "abc"
#Using @arr2, word2 => "ac" . "b" => "acb"

#Using @arr1, word1 => "ab" . "cd" . "e" => "abcde"
#Using @arr2, word2 => "abcde"

plan @testcases.elems;
cmp-ok solution(.key), &[eqv], .value for @testcases;

if ?%*ENV<AUTHOR_TESTING> {
  for @testcases.keys -> $i {
    my ($input, $output) = @testcases[$i].kv;
    say $i + 1 ~ '. testcase';
    isa-ok $input, List, 'domain data structure';
    ok all($input) ~~ List(Str), 'domain value';
    isa-ok $output, Bool, 'co-domain data structure';
    ok all($output) ~~ Bool, 'co-domain value';    
  }
}