#!/usr/bin/env raku
use Test;

is max-diff(<  5  9  3  4  6 >), 42, "Example 1";
is max-diff(<  1 -2  3 -4    >), 10, "Example 2";
is max-diff(< -3 -1 -2 -4    >), 10, "Example 3";
is max-diff(< 10  2  0  5  1 >), 50, "Example 4";
is max-diff(<  7  8  9 10 10 >), 44, "Example 5";

#
# I think the tests below cover each possibility but I'm not positive.
#
 
is max-diff(< 0 0 0 0 0 0 3 >),          0, "[ 0 0 0 0 0 0 3 ]         -> (0 * *) - (0 * *)"; 
is max-diff(< 3 4 5 6 7 8 9 >),         60, "[ 3 4 5 6 7 8 9 ]         -> (8 * 9) - (3 * 4)"; 
is max-diff(< -9 -8 -7 -6 -5 -4 -3 >),  60, "[ -9 -8 -7 -6 -5 -4 -3 ]  -> (-9 * -8) - (-4 * -3)"; 
is max-diff(< -13 -9 -6 0 7 8 10 >),   186, "[ -13 -9 -6 0 7 8 10 ]    -> (7 * 8) - (-13 * 10)";
is max-diff(< -2 -1 3 4 8 14 15 >),    226, "[ -2 -1 3 4 8 14 15 ]     -> (14 * 15) - (-2 * 8)"; 
is max-diff(< -12 -11 -8 0 0 3 9 >),   204, "[ -12 -11 -8 0 0 3 9 ]    -> (-12 * -11) - (-8 * 9)";
is max-diff(< -12 -8 -5 -1 0 2 14 >),  208, "[ -12 -8 -5 -1 0 2 14 ]   -> (-8 * -5) - (-12 * 14)";
is max-diff(< -14 -2 0 0 0 3 10 >),    140, "[ -14 -2 0 0 0 3 10 ]     -> (0 * *) - (-14 * 10)";
is max-diff(< 0 0 0 2 6 8 14 >),       112, "[ 0 0 0 2 6 8 14 ]        -> (8 * 14) - (0 * *)";
is max-diff(< -14 -8 -6 -2 0 0 0 >),   112, "[ -14 -8 -6 -2 0 0 0 ]    -> (-14 * -8) - (0 * *)";
is max-diff(< -15 -12 2 4 5 6 7 >),    172, "[ -15 -12 2 4 5 6 7 ]     -> (-15 * -12) - (2 * 4)";
is max-diff(< -6 -6 -5 -3 -1 12 15 >), 177, "[ -6 -6 -5 -3 -1 12 15 ]  -> (12 * 15) - (-3 * -1)";
is max-diff(< -9 -1 1 8 >),             71, "[ -9 -1 1 8 ]             -> (-1 * 1) - (-9 * 8)";

sub max-diff(@a)
{
    my %c := { -1 => [], 0 => [], 1 => [] }
    @a.classify(*.sign, :into(%c));
        
    if %c<0> >= @a.end 
    {
        return 0 
    }

    %c<-1> = %c<-1>.sort.Array;
    %c<1>  = %c<1> .sort.Array;

    if none %c<-1 0>  
    {
        return ([*] %c<1> .tail(2)) - ([*] %c<1> .head(2)) 
    }

    if none %c<1 0>   
    { 
        return ([*] %c<-1>.head(2)) - ([*] %c<-1>.tail(2)) 
    }
 
    return .max given gather
    {  
        if all %c<1> >= 3, %c<-1> 
        {
            take ([*] %c<1>[*-3,*-2]) - ([*] %c<-1>[0], %c<1>[*-1]);
            take ([*] %c<1>[*-2,*-1]) - ([*] %c<-1>[0], %c<1>[*-3])
        }

        if all %c<-1> >= 3, %c<1>
        {
            take ([*] %c<-1>[0,1]) - ([*] %c<-1>[2], %c<1>[*-1]);
            take ([*] %c<-1>[1,2]) - ([*] %c<-1>[0], %c<1>[*-1])
        }

        if %c<0>
        {
            if all %c<-1 1> 
            { 
                take -([*] %c<-1>.head, %c<1>.tail)
            }

            if %c<1> >= 2
            {
                take [*] %c<1>.tail(2);  
            }

            if %c<-1> >= 2
            {
                take [*] %c<-1>.head(2)  
            }
        }

        else
        {
            if %c<-1> == 2
            {
                take ([*] %c<-1>.head(2)) - ([*] %c<1>.head(2));
            }

            if %c<1> == 2 
            {
                take ([*] %c<1>.tail(2)) - ([*] %c<-1>.tail(2))
            }
        
            if all(%c<-1 1>) == 2
            {
                take ([*] %c<-1>.tail, %c<1>.head) - ([*] %c<-1>.head, %c<1>.tail)
            }
        }
    }
}
